

ActionManager = {}

function ActionManager.PlayActions(actions)
	local maxDelay = 0
	for k,v in pairs(actions)do 
		if (type(v.delay) == "number") then 
			if (v.delay > maxDelay) then
				maxDelay = v.delay
			end
			Rule_AddOneShot(function()
				ActionManager.action[v.action](v)
			end, v.delay)
		else
			ActionManager.action[v.action](v)
		end
	end
	return maxDelay
end

ActionManager.action = {}

ActionManager.action.showUI = function(params)
end

ActionManager.action.letterBox = function(params)
	Game_Letterbox(params.value)
end

ActionManager.action.canSkipNIS = function(params)
	UI_EnableEventSkip(params.value)
end

ActionManager.action.setCameraTarget = function(params)
	Camera_SetTarget(params.target, params.smooth, params.speed, params.resetToDefault)
end

ActionManager.action.spawnUnits = function(params)
	for k,v in pairs(params.units) do
		local unit = Survive.Unit:GetFromName(v.player, v.name)
		unit:SetTeamColour(v.teamColour)
		if(v.facing) then
			unit:SpawnFacing(v.position, v.facing, v.behaviors)		
		else
			unit:SpawnFacingCenter(v.position, v.behaviors)		
		end
		
		unit.useSpawnAnimation = params.useSpawnAnimation
		WaveManager:RegisterUnit(unit)
		if (params.pauseBehaviors) then
			unit:PauseBehaviors()
		end
			
		if(v.moveToPosition)then
			Cmd_Move(unit.sgroup, v.moveToPosition)
		end
		
		if(v.sgroup)then
			SGroup_AddGroup(v.sgroup, unit.sgroup)
		end
	end
end


ActionManager.action.spawnEntities = function(params)
	for k,v in pairs(params.entities) do
		local entity = Entity_Create(v.ebp, v.player, v.position, v.facing or v.position)
		Entity_Spawn(entity)
		Entity_SetTeamColourByChapter(entity, v.teamColour)
		
		if(v.egroup)then EGroup_Add(v.egroup, entity) end 
	end
end

ActionManager.action.castAbility = function(params)
	Cmd_Ability(params.sgroup, params.ability, params.target)
end

ActionManager.action.castDCA = function(params)
--~ 	ModMisc_TriggerDcaAction( "abilities\\eldar\\teleport_arrive", Real durationSecs, Math::Vector3f pos, PlayerID player ) 
	ModMisc_TriggerDcaAction( params.path, params.duration, params.position, params.player ) 
end

ActionManager.action.castPlayerAbility = function(params)
	print("Casting ability")
	Cmd_PlayerAbilityPos(params.player, params.ability, params.target)
end

ActionManager.action.teleportCloneWave = function(params)
	local wave = WaveManager:GetWaveByID("clonewave")
	
	if (type(wave.units) == "table") then
		for k,v in pairs(wave.units) do
			if (v.doppelganger) and (params.clones[k]) then
				if (params.clones[k].delay) then
					Rule_AddOneShot(function()
						SGroup_WarpToPos(v.sgroup, params.clones[k].pos)
					end, params.clones[k].delay or 0)
				else
					SGroup_WarpToPos(v.sgroup, params.clones[k].pos)
				end
			end
		end
	end
end

ActionManager.action.playSound = function(params)
	local soundInteger = Sound_PlayStreamed(params.path)
	local name = params.name or params.path
	Survive.data.sounds = Survive.data.sounds or { }
	Survive.data.sounds[name] = soundInteger
end

ActionManager.action.playDoppelgangerSound = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	local paths = { }
	for unitKey, unit in pairs(wave.units) do
		if (unit.data.blueprintString) then
			for k, v in pairs(params.sounds) do
				if (unit.data.blueprintString == v.doppelganger) then
					table.insert(paths, v.path)
					break
				end
			end
		end
	end
	
	if (#paths > 0) then
		ActionManager.action.playSound({path = paths[World_GetRand(1, #paths)]})
	end
end

ActionManager.action.stopSound = function(params)
	if (type(Survive.data.sounds[params.name]) == "number") then
		Sound_Stop(Survive.data.sounds[params.name])
	end
end

ActionManager.action.playNIS = function(params)
	nis_load(params.nis)
	
	local f = function()
		nis_play(params.nis)
	end
	
	Event_Start(f, 1)
end

ActionManager.action.destroyEGroup = function(params)
	if(scartype(params.egroup) == ST_STRING)then params.egroup = EGroup_FromName(params.egroup) end
	EGroup_Kill(params.egroup)
end

ActionManager.action.movePlayers = function(params)
	for k,v in pairs(Players) do
		if (SGroup_CountSpawned(v.hero.sgroup) > 0) then
			local recursiveMinionStack = {}
			local params = Clone(params)
			params.position = params.position[k]
			params.sgroup = v.hero.sgroup
			ActionManager.action.teleport(params)
			
			if (type(v.hero.minionList) == "table") then
				ActionManager.action.teleportMinions(params, v.hero.minionList, recursiveMinionStack)
			end
		end
	end
end

ActionManager.action.teleportMinions = function(params, minionList, recursiveMinionStack)
	local minionList = minionList or { }
	for minionKey, minion in pairs(minionList) do
		if (SGroup_CountSpawned(minion.sgroup) > 0) then
			for k, v in pairs(recursiveMinionStack) do
				if (v == minion) then return end
			end
			
			local params = Clone(params)
			params.sgroup = minion.sgroup
			params.position = Util_GetRandomPosition(params.position, 6, 3)
			ActionManager.action.teleport(params)
			table.insert(recursiveMinionStack, minion)
			if (type(minion.minionList) == "table") then
				ActionManager.action.teleportMinions(params, minion.minionList, recursiveMinionStack)
			end
		end
	end
end

ActionManager.action.teleport = function(params)
	local raceNameTable = { [RACE_ELDAR] = "Eldar", [RACE_SPACEMARINE] = "Space_Marine", [RACE_ORK] = "Ork", [RACE_TYRANID] = "Tyranid", [RACE_TAU] = "Tau", [RACE_NECRON] = "Necron" }
	local racename = raceNameTable[Player_GetRaceString(Util_GetPlayerOwner(params.sgroup))] or "Space_Marine"
	local teleportArrive = "Abilities\\"..racename.."\\teleport_arrive"
	local teleportLeave = "Abilities\\"..racename.."\\teleport_leave"
	local position = params.position or World_Pos(0, 0, 0)
	
	Util_SetAnimatorAction(params.sgroup, teleportLeave)
	Cmd_SquadAbilityPos(params.sgroup, Util_GetAbilityID("ability\\core\\race_ork\\survive\\scar_teleport"), position, false)
	Rule_AddOneShot(function() Util_SetAnimatorAction(params.sgroup, teleportArrive) end, 0.3)
end

ActionManager.action.fadeToBlack = function(params)
	Game_FadeToBlack( params.value, params.length )
end

ActionManager.action.moveCameraToLocalPlayer = function(params)
	local p = Survive.Player.GetLocal()
	Camera_SetTarget( p.hero.sgroup, false )
	Camera_MoveToDefaultAngle( false )
	
	Misc_SelectSquad(SGroup_GetRandomSpawnedSquad( p.hero.sgroup ), true)
end

ActionManager.action.unPauseWaveBehaviors = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	for k, v in pairs(wave.units) do
		if (v:AreBehaviorsPaused()) then
			v:UnPauseBehaviors()
		end
	end
end

ActionManager.action.addAllUnconsciousToWave = function(params)
	local team = Player_GetTeam(Survive.data.enemyNPC)
	local teamPlayers = Team_GetPlayers(team)
	local sgroup = SGroup_Create("")
	for k, player in pairs(teamPlayers) do
		local playerSquads = Player_GetSquads(player)
		SGroup_FilterUnconscious(playerSquads, FILTER_KEEP)
		if (SGroup_CountSpawned(playerSquads) > 0) then
			SGroup_AddGroup(sgroup, playerSquads)
		end
	end
	if (SGroup_CountSpawned(sgroup) > 0) then
		for i=1, SGroup_CountSpawned(sgroup) do
			local squad = SGroup_GetSpawnedSquadAt(sgroup, i)
			local entity = Squad_EntityAt(squad, 0)
			local unit = Survive.assets.entities[Entity_GetGameID(entity)]
			WaveManager:RegisterUnit(unit)
		end
	end
end

ActionManager.action.setUnitAnimatorState = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	if (params.group) then
		Util_SetAnimatorState(params.group, params.stateMachine, params.stateName)
	else
		for k, unit in pairs(wave.units) do
			if (unit.data.name == params.unitName) then
				Util_SetAnimatorState(unit.sgroup, params.stateMachine, params.stateName)
			end
		end
	end
end

ActionManager.action.setUnitAnimatorAction = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	if (params.players) then
		for k, player in pairs(Survive.players) do
			Util_SetAnimatorAction(player.hero.sgroup, params.actionName)
		end
	else
		for k, unit in pairs(wave.units) do
			if (unit.data.name == params.unitName) then
				Util_SetAnimatorAction(unit.sgroup, params.actionName)
			end
		end
	end
end

ActionManager.action.reviveDoppelgangers = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	for k, unit in pairs(wave.units) do
		local sgroupCount = SGroup_CountSpawned(unit.sgroup)
		if (sgroupCount > 0) and (unit.doppelganger) then
			SGroup_SetAvgHealth(unit.sgroup, 1)
			unit.hasBeenUnconscious = false
		elseif (sgroupCount > 0) then
			unit.hasBeenUnconscious = false
		end
	end
end

ActionManager.action.openGates = function(params)
	local wave = WaveManager.waves[WaveManager.currentWave]
	local duration = params.duration
	for k, v in pairs(wave.entries) do
		v.gate:Open(60)
	end
end

ActionManager.action.surviveComplete = function(params)
	if (type(params.godrays) == "number") then
		for i=1, params.godrays do
			local randomDelay = (World_GetRand(0, 30)/10)
			Rule_AddOneShot(function()
				Entity_CreateENV(
					Util_GetEntityBlueprintID("ebps\\world_objects\\gameplay\\invisible_object_god_ray"),
					Util_GetRandomPosition(World_Pos(0, 200, 0), 60),
					World_Pos(10.62, 200, 93.59)
				)
			end, randomDelay)
		end
	end
	LastStand_FinalWaveCompleted()
end

ActionManager.action.surviveComplete2 = function()
	LastStand_FinalWaveCompleted()
end

ActionManager.action.doNothing = function(params)

end

ActionManager.action.changeAtmosphere = function(params)
	Game_AtmosphereChangeOverTime(params.atmosphere, params.duration)
end

ActionManager.action.awardPoints = function(params)
	local totalPoints = math.floor((params.points*ScoreBoard.scoreModifier)*ScoreBoard:GetTotalMultiplier())
	local text = Loc_FormatText(9120325, params.locString, Loc_ConvertNumber(totalPoints))
	
	LastStand_AddKillKicker( text )
	ScoreBoard:AddPoints(totalPoints, "test")
end

ActionManager.action.prepareDoppelgangers = function(params)
	local heroNames = {
		["sbps\\core\\race_eldar\\survive\\farseer_hero"] = { loc = 9120245, dev = "Farseer" },
		["sbps\\core\\race_ork\\survive\\mekboy_hero"] = { loc = 9120241, dev = "Mekboy" },
		["sbps\\core\\race_marine\\survive\\tactical_marine_hero"] = { loc = 9120231, dev = "Captain" },
		["sbps\\core\\race_tyranid\\survive\\hive_tyrant_hero"] = { loc = 9129862, dev = "Hive Tyrant" },
		["sbps\\core\\race_chaos\\survive\\chaos_sorcerer_hero"] = { loc = 9130680, dev = "Sorcerer" },
		["sbps\\core\\race_imperial_guard\\survive\\ig_commander_hero"] = { loc = 9155953, dev = "Commander" },
		["sbps\\core\\race_tau\\survive\\commander_hero"] = { loc = 9161229, dev = "Tau Commander" },
    	["sbps\\core\\race_necron\\survive\\necron_overlord_hero"] = { loc = 9162635, dev = "Necron Overlord" },
	}

  --print("Action Manager.action.prepareDoppelgangers")
	for k,wave in pairs(SurviveWaves) do
		if(wave.id == "clonewave")then
			for playerKey, playerData in pairs(Survive.players) do
				local player = playerData.player
				local hero = Survive.Unit:GetPlayerUnit(Survive.data.enemyNPC, playerData.hero.data)
				--print("Hero blueprint string: "..hero.data.sbp)
				hero.data.blueprintString = hero.data.sbp
				hero.data.sbp = Util_GetSquadBlueprintID(hero.data.sbp)
				hero.data.locName = Loc_FormatText(9120364, heroNames[hero.data.blueprintString].loc, 9120361)
				hero.data.name = (heroNames[hero.data.blueprintString].dev.." Doppelganger")
				hero.location = 3
				hero.doppelganger = true
				hero.data.teamColour = wave.teamColour
				hero.data.attributes = {
					{ type = LEVELING_ATTRIB_POINTS_Health, level = 3 },
					{ type = LEVELING_ATTRIB_POINTS_Melee, level = 2 },
					{ type = LEVELING_ATTRIB_POINTS_Ranged, level = 2 },
					{ type = LEVELING_ATTRIB_POINTS_Energy, level = 5 },
				}
				hero.data.points = 500
				table.insert(wave.spawnList, hero)
				hero.data.behaviorList = {
					{name="SearchAndDestroy"},
					{name="NonCombatAbilities", abilityBehavior="nonCombat"},
					{name="CombatAbilities"},
					{
						name="ReviveUnconscious",
						requirements = {{ name = "RechargeTime", min = 3, max = 5 }, { name = "Chance", percent = 0.4 }},
					},
				}
				hero.data.wargear = hero.data.wargear or { }
				table.insert(hero.data.wargear, "wargear\\wargear\\core\\race_chaos\\accessories\\nimbus")
				
				hero:AddSpawnAction( {action = function()
				  hero:IncrementSimVariable(familyManager.sim_variable.last_stand_doppelganger, 1)
				  end })
				   
				if (params.preventUnconscious) then
					hero:AddSpawnAction({ action = function()
						hero:SetUnconscious(false)
					end })
				end
			end
		end
	end
end
ActionManager.action.DropWargear = function(unit, entity, params)
	World_DropWargearAtPosition(params.player, params.wargear, Entity_GetPosition(entity))
end

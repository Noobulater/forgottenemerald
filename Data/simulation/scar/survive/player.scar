Crawler = Crawler or {}
Util_LoadOnce("Survive//Data//Heroes.scar")

Survive.Player = Survive.Object:New()
local Player = Survive.Player

Player.player = nil
Player.attributes = {}
Player.camera = {
	orbit = 225,
	declination = 20,
	distance = 30,
}
Players = {}

function Player:New(player)
	if (not Rule_Exists(Player_KillEvent)) then
		Rule_AddEvent(Player_KillEvent, GE_EntityKilled)
	end
	
    local new = Clone(self)
    new.player = player
	new.team = Player_GetTeam(player)
    new.id = Player_GetID(player)
	new.hero = new:GetHero()
	new.hero.data.points = -1
	new.hero.data.locName = Misc_GetPlayerNameLocalized(player)
	new.group = new.hero.sgroup
	new.index = #Players + 1
	table.insert(Players, new)
    return new
end

function Player:Start()
    self:spawnCharacter()
    if(self:isLocal())then
        self:SetupLocalPlayer()
    end
end

function Player_KillEvent(entity, killer)
	if (type(entity) == "table") then
		if(Entity_IsValid(entity.id) and Survive.assets.entities[Entity_GetGameID(entity)])then
			Survive.assets.entities[Entity_GetGameID(entity)]:AwardPoints()
			if(SGroup_GetAvgHealth(Survive.assets.entities[Entity_GetGameID(entity)].sgroup) <= 0.000025)then
				Survive.assets.entities[Entity_GetGameID(entity)]:PlayDeathActions(entity)
			end
		end
	end
end

function Player:isLocal()
    return Player_GetID(Game_GetLocalPlayer()) == Player_GetID(self.player)
end

function Player:SetupLocalPlayer()
    Rule_AddOneShot(function()
		FOW_RevealArea(self.startPosition.x, self.startPosition.z, 60, 0) 
        Util_DeselectAll()
        Camera_SetTarget(self.group, false)
--~         Camera_SetInputEnabled( false ) 
--~         
        Misc_SelectSquad(SGroup_GetRandomSpawnedSquad( self.group ), true)
		Misc_SetSquadControlGroup(SGroup_GetRandomSpawnedSquad(self.group), 1)
--~         Misc_SetSelectionInputEnabled( false )
--~         Camera_MoveToDefaultAngle( false )
        --UI_ShowBossHealth(true, SGroup_GetRandomSpawnedSquad( self.group ))
    end, 0)    
--~     
--~     UI_ShowIntelEventsPanel( false )
--~     --UI_ShowMiniMapPanel( false )
--~     UI_ShowSquadTabs( false )
--~     UI_ShowCoverOnNonSelectedUnits ( false )
--~     UI_ShowDecorators( false )
--~     UI_ShowMenuButtonPanel( false )
--~     --UI_ShowObjectivesPanel( false )
--~     --UI_ShowSelectionPanel( false )
--~     UI_SetSelectionUIVisible( false )
--~     
--~     Camera_SetGameplayCameraTuningValue(CGTT_DefaultOrbit, self.camera.orbit)
--~     Camera_SetGameplayCameraTuningValue(CGTT_DefaultDistance, self.camera.distance)
--~     Camera_SetGameplayCameraTuningValue(CGTT_DefaultDeclination, self.camera.declination)
end

function Player:spawnCharacter()
	self.hero:Spawn(self.startPosition)
    self.ko = false
	self.squad = SGroup_GetSpawnedSquadAt(self.hero.sgroup, 1)
	UI_AddSquadTab(SGroup_GetRandomSpawnedSquad(self.group), -1)
end

function Player:AddKill(entity)
	self.kills = self.kills or 0
	self.kills = self.kills + 1
	
	local text = Misc_GetPlayerName(self.player) .. " kills: ".. self.kills
	local identifier = "player"..self.index
	local pos = {x=0.05, y=0.4+(self.index * 0.025)}
	PrintOnScreen(text, identifier, 0, pos)
end

function Player:ApplyWargear(wargear)
	for k, v in pairs(wargear) do
		SGroup_EquipWargear(self.group, v)
	end
end

local colors = {
    {
        r = 0,
        b = 0,
        g = 255,
    },
    {
        r = 0,
        b = 255,
        g = 0,
    },
    {
        r = 255,
        b = 0,
        g = 0,
    }
}

function Player:Update()
    if(self.hero:IsKO() ~= self.ko)then
        self.ko = not self.ko
        Survive.EventHandler:SendEvent("HeroKOStateChange", self)
    end
	
    if(self.ko == true and not Survive.over) then
		self:CheckPlayersAreAllDead()  
    end
end

function Player:MoveManager()
    local d = 2-- distance
	local pos = SGroup_GetPosition(self.group)
	local orig = Clone(pos)
	
	if(UI_IsKeyDown("W"))then
		pos.x = pos.x + d
		pos.z = pos.z + d
	end
	if(UI_IsKeyDown("S"))then
		pos.x = pos.x - d
		pos.z = pos.z - d
	end
	if(UI_IsKeyDown("A"))then
		pos.x = pos.x - d
		pos.z = pos.z + d
	end
	if(UI_IsKeyDown("D"))then
		pos.x = pos.x + d
		pos.z = pos.z - d
	end
	
	if(pos.x ~= orig.x or pos.z ~= orig.z)then
		Cmd_Move(self.group, pos)
	end
end

function Player:GetPosition()
    return SGroup_GetPosition(self.group)
end

function Player:koCam(rand)
    if(not self.ko)then
        Camera_SetTarget(self.group, true, 15)
        return
    end
    
    local t = {}
    for k,v in pairs(Survive.players) do
        if( v ~= self and v.ko == false)then
            table.insert(t, v)
        end
    end
    
    if(#t > 0)then
        local newCam = t[(rand % #t) + 1]
        Camera_SetTarget(newCam.group, true, 15)
    end
end

function Player.GetLocal()
    for k,v in pairs(Survive.players)do 
        if(v:isLocal())then
            return v
        end
    end
end

function Player:HasSelectedUnit()
	--return Player_HasUpgrade(self.player, Util_GetUpgradeID("upgrade\\core\\race_marine\\temp\\crawler_has_selected"))
	return GetIfPlayerHasSelectedCrawlerEquipment(self)
end

function Player:CheckPlayersAreAllDead()
	Rule_AddOneShot(function()
		local dead = true
		for k,v in pairs(Survive.players) do 
			if(not v.ko and Player_IsAlive(v.player)) then
				dead = false
			end
		end
		
		if(dead and not Survive.over)then
			Survive.over = true
			Rule_AddOneShot(function()
				Game_FadeToBlack(FADE_OUT, 3)
				Rule_AddOneShot(function() Game_EndSP(false) end, 3)
			end, 2.5)
		end
	end, 0.5)
end

function Player:BuildHealthBar(pct)
    local str = "["
    for i=1, 15 do
        if(pct > i * (100/15))then
            str = str .. "="
        end
    end
    str = str .. "]"
    return str
end

function Player:DisplayMouseOverEnemyHealth()
	local entity = Misc_GetMouseOverEntity()
	if (entity) then
		local squad = Entity_GetSquad(entity)
		if (squad) then
			local owner = Util_GetPlayerOwner(squad)
			local team = Player_GetTeam(owner)
			if (team ~= self.team) then
				UI_ShowBossHealth(true, squad)
			end
		end
	end
end

function Player:GetHero(player)
	player = player or self.player
	local hero
	if (Misc_IsHumanPlayer(player)) then
		hero = LastStand_GetPlayerData(player)
	else
		hero = LastStand_GetRandomHeroData(player)
	end
	return Survive.Unit:GetPlayerUnit(player, hero)
end

function Player:GetWargearPointMultiplier()
	local wargearPointReference = {
		["wargear\\wargear\\core\\race_marine\\accessories\\survive\\point_booster_1"] = 0.05,
		["wargear\\wargear\\core\\race_marine\\accessories\\survive\\point_booster_2"] = 0.03,
		["wargear\\wargear\\core\\race_marine\\accessories\\survive\\point_booster_3"] = 0.03,
	}
	
	local totalPointMultiplier = 0
	
	for wargearKey, wargear in pairs(self.hero.data.wargear) do
		for referenceKey, pointMultiplierValue in pairs(wargearPointReference) do
			if (wargear == referenceKey) then
				totalPointMultiplier = totalPointMultiplier + pointMultiplierValue
			end
		end
	end
	
	return totalPointMultiplier
end

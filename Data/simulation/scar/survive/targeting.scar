
Survive.Targeting = { }
local Targeting = Survive.Targeting

function Targeting.FindAlly(self, params)
	local tempSG = Targeting.FindAllAllies(self, params)
	
	if not (tempSG) then return false end
	
	if(params.which == "MostDamaged") then
		local mostDamaged = SGroup_GetRandomSpawnedSquad(tempSG)
		for i = 1, SGroup_CountSpawned(tempSG) do
			local squad = SGroup_GetSpawnedSquadAt(tempSG, i)
			if(Squad_GetHealth(squad) < Squad_GetHealth(mostDamaged)) and (Squad_IsAnyConscious(squad))then
				mostDamaged = squad
			end
		end
		
		SGroup_Clear(tempSG)
		if (Util_IsValid(mostDamaged)) then
			SGroup_Add(tempSG, mostDamaged)
		end
		return tempSG
	elseif(params.which == "Unconscious") then
		SGroup_FilterUnconscious(tempSG, FILTER_KEEP)
		if (SGroup_CountSpawned(tempSG) > 0) then
			local squad = SGroup_GetRandomSpawnedSquad(tempSG)
			SGroup_Clear(tempSG)
			SGroup_Add(tempSG, squad)
			return tempSG
		else
			return false
		end
	else
		SGroup_FilterUnconscious(tempSG, FILTER_REMOVE)
		if (SGroup_CountSpawned(tempSG) == 0) then return false end
		local squad = SGroup_GetRandomSpawnedSquad(tempSG)
		SGroup_Clear(tempSG)
		SGroup_Add(tempSG, squad)
		return tempSG
	end
end

function Targeting.FindAllyEntity(self, params)
	local tempEG = Targeting.FindAllAlliesEntities(self, params)
	
	if not (tempEG) then return false end
	
	if(params.which == "MostDamaged") then
		local mostDamaged = EGroup_GetRandomSpawnedEntity(tempEG)
		for i = 1, EGroup_CountSpawned(tempEG) do
			local entity = EGroup_GetSpawnedEntityAt(tempEG, i)
			if(Entity_GetHealth(entity) < Entity_GetHealth(mostDamaged))then
				mostDamaged = entity
			end
		end
		
		EGroup_Clear(tempEG)
		if (Util_IsValid(mostDamaged)) then
			EGroup_Add(tempEG, mostDamaged)
		end
		return tempEG
	else
		if (EGroup_CountSpawned(tempEG) == 0) then return false end
		local entity = EGroup_GetRandomSpawnedEntity(tempEG)
		EGroup_Clear(tempEG)
		EGroup_Add(tempEG, entity)
		return tempEG
	end
end

function Targeting.FindAllAllies(self, params)
	local team = Util_GetTeam(self.sgroup)
	local tempSG = SGroup_Create("")
	
	params.distance = params.distance or 30
	
	Team_GetAllSquadsNearMarker(team, tempSG, SGroup_GetPosition(self.sgroup), params.distance)
	if (SGroup_CountSpawned(tempSG) == 0) then return false end
	return tempSG
end
function Targeting.FindAllAlliesEntities(self, params)
	local team = Util_GetTeam(self.sgroup)
	local tempEG = EGroup_Create("")
	
	params.distance = params.distance or 30
	
	Team_GetAllEntitiesNearMarker(team, tempEG, SGroup_GetPosition(self.sgroup), params.distance)
	if (EGroup_CountSpawned(tempEG) == 0) then return false end
	return tempEG
end

function Targeting.FindEnemy(self, params)
	local sgroup = Targeting.GetAllNearbyEnemies(self, params)
	if (sgroup) then
		local squad = SGroup_GetSpawnedSquadAt(sgroup, World_GetRand(1, SGroup_CountSpawned(sgroup)))
		Util_GroupDelete(sgroup)
		local sgroup = Util_CreateGroup("find_enemy_temp_"..tostring(self), squad)
		return sgroup
	end
	
	return false
end

function Targeting.FindEnemyNormalize(self, params)
	local TargetPos = Targeting.FindEnemy(self, params)
	
	if(not TargetPos)then
		return false
	end
	
	TargetPos = Util_GetPosition(TargetPos)
	local casterPos = SGroup_GetPosition(self.sgroup)
	local normalized = Vector3_Sub(TargetPos, casterPos)
		
	normalized = Vector3_SafeNormal(normalized)
	normalized = Vector3_Scale(normalized, params.normalDistance)
	TargetPos = Vector3_Add(normalized, casterPos)	
	
	return TargetPos	
end

function Targeting.FindFarthestEnemy(self, params)
	local sgroup = Targeting.GetAllNearbyEnemies(self, params)
	local selfPosition = Util_GetPosition(self.sgroup)
	if (sgroup) then
		local currentDistance = 0
		local squad
		local _findFarthest = function(groupid, itemindex, itemid)
			local position = Util_GetPosition(itemid)
			local distance = World_DistancePointToPoint(position, selfPosition)
			if (distance > currentDistance) then
				currentDistance = distance
				squad = itemid
			end
		end
		
		SGroup_ForEach(sgroup, _findFarthest)
		
		Util_GroupDelete(sgroup)
		local sgroup = Util_CreateGroup("find_enemy_temp_"..tostring(self), squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindNearestEnemy(self, params)
	local sgroup = Targeting.GetAllNearbyEnemies(self, params)
	local selfPosition = Util_GetPosition(self.sgroup)
	if (sgroup) then
		local currentDistance = params.distance or 40
		local squad
		local _findFarthest = function(groupid, itemindex, itemid)
			local position = Util_GetPosition(itemid)
			local distance = World_DistancePointToPoint(position, selfPosition)
			if (distance <= currentDistance) then
				currentDistance = distance
				squad = itemid
			end
		end
		
		SGroup_ForEach(sgroup, _findFarthest)
		
		Util_GroupDelete(sgroup)
		local sgroup = Util_CreateGroup("find_enemy_temp_"..tostring(self), squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindWeakestEnemy(self, params)
	local sgroup = Targeting.GetAllNearbyEnemies(self, params)
	if (sgroup) then
		local squadHealth
		local squad
		
		local _findWeakest = function(groupid, itemindex, itemid)
			local health = Squad_GetHealth(itemid)
			if (squadHealth) then
				if (health < squadHealth) then
					squadHealth = health
					squadIndex = itemid
				end
			else
				squadHealth = health
				squad = itemid
			end
		end
		
		SGroup_ForEach(sgroup, _findWeakest)
		
		Util_GroupDelete(sgroup)
		local sgroup = SGroup_CreateReplaceIfFound("find_enemy_temp")
		SGroup_Add(sgroup, squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindStrongestEnemy(self, params)
	local sgroup = Targeting.GetAllNearbyEnemies(self, params)
	if (sgroup) then
		local squadHealth
		local squad
		
		local _findStrongest = function(groupid, itemindex, itemid)
			local health = Squad_GetHealth(itemid)
			if (squadHealth) then
				if (health > squadHealth) then
					squadHealth = health
					squadIndex = itemid
				end
			else
				squadHealth = health
				squad = itemid
			end
		end
		
		SGroup_ForEach(sgroup, _findStrongest)
		
		Util_GroupDelete(sgroup)
		local sgroup = SGroup_CreateReplaceIfFound("find_enemy_temp")
		SGroup_Add(sgroup, squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindEnemyOffset(self, params)
	local sgroup = Targeting.FindEnemy(self, params)
	if (sgroup == false) then
		return false
	else
		local offset = params.offset or 30
		local position = SGroup_GetPosition(sgroup)
		local newPosition = { }
		for k, v in pairs(position) do
			local number = v
			if (type(number) == "number") and ((k == "x") or (k == "z")) then
				number = number + World_GetRand(-offset, offset)
				newPosition[k] = number
			end
		end
		return Util_ScarPos(newPosition.x, newPosition.z)
	end
end

function Targeting.FindPositionOffset(self, params)
	local position = SGroup_GetPosition(self.sgroup)
	local newPosition = { }
	local distance = params.distance or 10
	newPosition.x = position.x + World_GetRand(-distance, distance)
	newPosition.z = position.z + World_GetRand(-distance, distance)

	return Util_ScarPos(newPosition.x, newPosition.z)
end

function Targeting.GetAllNearbyEnemies(self, params)
	local params = params or { }
	local enemyTeam = Targeting.GetEnemyTeam(self)
	local sgroup = SGroup_CreateReplaceIfFound("find_enemy_"..tostring(self))
	local distance = params.distance or 40
	Team_GetAllSquadsNearMarker(enemyTeam, sgroup, Util_GetPosition(self.sgroup), distance)
	SGroup_FilterInfiltrated(sgroup, FILTER_REMOVE)
	SGroup_FilterUnconscious(sgroup, FILTER_REMOVE)
	
	if (SGroup_CountSpawned(sgroup) == 0) then 
		return false 
	elseif (type(params.minimum) == "number") then
		local firstPos = Util_GetPosition(self.sgroup)
		local removeSquads = {}
		for i=1, SGroup_CountSpawned(sgroup) do
			local squad = SGroup_GetSpawnedSquadAt(sgroup, i)
			local secondPos = Util_GetPosition(squad)
			local distance = World_DistancePointToPoint(firstPos, secondPos)
			if (params.minimum > distance) then
				table.insert(removeSquads, 1, squad)
			end
		end
		for k, v in pairs(removeSquads) do
			SGroup_Remove(sgroup, v)
		end
		if (SGroup_CountSpawned(sgroup) == 0) then return false end
	end
	
	if (type(params.filterOutEntityType) == "string") then
		local removeSquads = { }
		for i=1, SGroup_CountSpawned(sgroup) do
			local squad = SGroup_GetSpawnedSquadAt(sgroup, i)
			if (Squad_Count(squad) > 0) then
				local entity = Squad_EntityAt(squad, 0)
				if (Entity_IsOfType(entity, params.filterOutEntityType)) then
					table.insert(removeSquads, squad)
				end
			end
		end
		for k, v in pairs(removeSquads) do
			SGroup_Remove(sgroup, v)
		end
		if (SGroup_CountSpawned(sgroup) == 0) then return false end
	end
	
	return sgroup
end

function Targeting.FindRandomEnemyPosition(self, params)
	local position
	local enemyTeam = Targeting.GetEnemyTeam(self)
	local sgroup = SGroup_CreateReplaceIfFound("find_random_enemy_position_"..tostring(self))
	local egroup = EGroup_CreateReplaceIfFound("find_random_enemy_entity_position_"..tostring(self))
	Team_GetAll(enemyTeam, sgroup, egroup)
	SGroup_FilterInfiltrated(sgroup, FILTER_REMOVE)
	SGroup_FilterUnconscious(sgroup, FILTER_REMOVE)
	
	local sgroupCount = SGroup_CountSpawned(sgroup)
	local egroupCount = EGroup_CountSpawned(egroup)
	
	
	if (sgroupCount > 0) and (sgroupCount > 0) then
		local posTable = { }
		local count = 1
		if (sgroupCount > 0) then
			posTable[count] = Util_GetPosition(SGroup_GetSpawnedSquadAt(sgroup, World_GetRand(1, SGroup_CountSpawned(sgroup))))
			count = count + 1
		end
--~ 		if (egroupCount > 0) then
--~ 			posTable[count] = Util_GetPosition(EGroup_GetSpawnedEntityAt(egroup, World_GetRand(1, EGroup_CountSpawned(egroup))))
--~ 			count = count + 1
--~ 		end
		
		position = posTable[World_GetRand(1, #posTable)]
		
	else
		return Util_ScarPos(0, 0)
	end
	
	
	Util_GroupDelete(sgroup)
	Util_GroupDelete(egroup)
	return position
end

function Targeting.FindNearestEnemyInWorld(self, params)
	local enemyTeam = Targeting.GetEnemyTeam(self)
	local sgroup = SGroup_CreateReplaceIfFound(tostring(self).."_nearest_target")
	local egroup = EGroup_CreateReplaceIfFound(tostring(self).."_nearest_target")
	Team_GetAll(enemyTeam, sgroup, egroup)
	SGroup_FilterInfiltrated(sgroup, FILTER_REMOVE)
	SGroup_FilterUnconscious(sgroup, FILTER_REMOVE)
	local unitData = { }
	
	local _findNearest = function(groupid, itemindex, itemid)
		local position = Util_GetPosition(itemid)
		local distance = World_DistancePointToPoint(position, Util_GetPosition(self.sgroup))
		if (not unitData.distance) 
		or (distance < unitData.distance) then
			unitData = { squad = itemid, position = position, distance = distance }
		end
	end
	SGroup_ForEachEx(sgroup, _findNearest, true, false)
	
	SGroup_Clear(sgroup)
	Util_GroupDelete(egroup)
	
	if (unitData.squad) then
		SGroup_Add(sgroup, unitData.squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindFarthestEnemyInWorld(self, params)
	local enemyTeam = Targeting.GetEnemyTeam(self)
	local sgroup = SGroup_CreateReplaceIfFound(tostring(self).."_furthest_target")
	local egroup = EGroup_CreateReplaceIfFound(tostring(self).."_furthest_entity_target")
	Team_GetAll(enemyTeam, sgroup, egroup)
	SGroup_FilterInfiltrated(sgroup, FILTER_REMOVE)
	SGroup_FilterUnconscious(sgroup, FILTER_REMOVE)
	local unitData = { }
	
	local _findFarthest = function(groupid, itemindex, itemid)
		local position = Util_GetPosition(itemid)
		local distance = World_DistancePointToPoint(position, Util_GetPosition(self.sgroup))
		if (not unitData.distance) 
		or (distance > unitData.distance) then
			unitData = { squad = itemid, position = position, distance = distance }
		end
	end
	SGroup_ForEachEx(sgroup, _findFarthest, true, false)
	
	SGroup_Clear(sgroup)
	Util_GroupDelete(egroup)
	
	if (unitData.squad) then
		SGroup_Add(sgroup, unitData.squad)
		return sgroup
	else
		return false
	end
end

function Targeting.FindWeakestEnemyInWorld(self, params)
	local enemyTeam = Targeting.GetEnemyTeam(self)
	local sgroup = SGroup_CreateReplaceIfFound(tostring(self).."_furthest_target")
	local egroup = EGroup_CreateReplaceIfFound(tostring(self).."_furthest_entity_target")
	Team_GetAll(enemyTeam, sgroup, egroup)
	SGroup_FilterInfiltrated(sgroup, FILTER_REMOVE)
	SGroup_FilterUnconscious(sgroup, FILTER_REMOVE)
	local unitData = { }
	
	local _findWeakest = function(groupid, itemindex, itemid)
		local health = Squad_GetHealth(itemid)
		if (not unitData.health) 
		or (health < unitData.health) then
			unitData = { squad = itemid, health = health }
		end
	end
	SGroup_ForEachEx(sgroup, _findWeakest, true, false)
	
	SGroup_Clear(sgroup)
	Util_GroupDelete(egroup)
	
	if (unitData.squad) then
		SGroup_Add(sgroup, unitData.squad)
		return sgroup
	else
		return false
	end
end

function Targeting.Self(self, params)
	return self.sgroup
end

function Targeting.SelfRandomOffset(self, params)
	local distance = params.distance or 15
	local minimum = params.minimum or 0
	return Util_GetRandomPosition(self.sgroup, distance, minimum)
end
	
function Targeting.GetEnemyTeam(self, params)
	local enemyTeam = self.enemyTeam or Player_GetTeam(Player_FindFirstEnemyPlayer(Util_GetPlayerOwner(self.sgroup)))
	if (enemyTeam == Player_GetTeam(self.player)) then
		for i=1, World_GetPlayerCount() do
			local team = Player_GetTeam(World_GetPlayerAt(i))
			if (team ~= enemyTeam) then
				enemyTeam = team
				break
			end
		end
	end
	return enemyTeam
end

function Survive.Targeting.GetAllFriendlyUnconscious(self, params)
	local team = Player_GetTeam(self.player)
	local teamPlayers = Team_GetPlayers(team)
	local sgroup = SGroup_Create("")
	for k, player in pairs(teamPlayers) do
		local playerSquads = Player_GetSquads(player)
		SGroup_FilterUnconscious(playerSquads, FILTER_KEEP)
		if (SGroup_CountSpawned(playerSquads) > 0) then
			SGroup_AddGroup(sgroup, playerSquads)
		end
	end
	if (SGroup_CountSpawned(sgroup) > 0) then
		return sgroup
	else
		return false
	end
end

function Targeting.OwnersAttacker(self, params)
	if (self.owner) and (SGroup_CountSpawned(self.owner.sgroup) > 0) then
		local sgroup = SGroup_Create("")
		SGroup_GetLastAttacker(self.owner.sgroup, sgroup)
		if (SGroup_CountSpawned(sgroup) > 0) then
			if (type(params.filterOutEntityType) == "string") then
				if (Entity_IsOfType(Survive_GetEntity(sgroup), params.filterOutEntityType)) then
					return false
				else
					return sgroup
				end
			else
				return sgroup
			end
		else
			return false
		end
	end
end

function Targeting.GetDoppelgangerTarget(self, params)
--~ 	local allies = Targeting.FindAllAllies(self, params)
	local enemies = Targeting.GetAllNearbyEnemies(self, params)
	
	local sgroup = SGroup_Create("")
	
--~ 	if (allies) then
--~ 		for i=1, SGroup_CountSpawned(allies) do
--~ 			local squad = SGroup_GetSpawnedSquadAt(allies, i)
--~ 			if (Squad_Count(squad) > 0) then
--~ 				local entity = Squad_EntityAt(squad, 0)
--~ 				if not (params.advanced) then
--~ 					if (Entity_IsOfType(entity, "hero")) then
--~ 						break
--~ 					end
--~ 				end
--~ 				local unit = Survive.assets.entities[Entity_GetGameID(entity)]
--~ 				if (unit) and (self.summonedDoppelganger) then
--~ 					local blueprint = Squad_GetBlueprintName(squad)
--~ 					if (blueprint == "sbps\\core\\race_chaos\\survive\\chaos_sorcerer_hero") then
--~ 						break
--~ 					end
--~ 				end
--~ 				
--~ 				SGroup_Add(sgroup, squad)
--~ 			end
--~ 		end
--~ 	end
	if (enemies) then
		for i=1, SGroup_CountSpawned(enemies) do
			local squad = SGroup_GetSpawnedSquadAt(enemies, i)
			if (Squad_Count(squad) > 0) then
				local entity = Squad_EntityAt(squad, 0)
				if not (params.advanced) then
					if (Entity_IsOfType(entity, "hero")) then
						break
					end
				end
				local unit = Survive.assets.entities[Entity_GetGameID(entity)]
				if (unit) and (self.summonedDoppelganger) then
					local blueprint = Squad_GetBlueprintName(squad)
					if (blueprint == "sbps\\core\\race_chaos\\survive\\chaos_sorcerer_hero") then
						break
					end
				end
				
				SGroup_Add(sgroup, squad)
			end
		end
	end
	
	if (SGroup_CountSpawned(sgroup) == 0) then return false end
	return SGroup_GetRandomSpawnedSquad(sgroup)
	
end
	

function Survive_ConfuseTarget(caster, target)
	local target = target or caster
	local maxDistance = 60
	local targetscartype = scartype(target)
	if (targetscartype == ST_ENTITY) then
		target = Entity_GetSquad(target)
	end
	if (scartype(target) == ST_SQUAD) and (Squad_IsValid(Squad_GetGameID(target))) then
		local sgroup = Util_CreateGroup("FindNewTargetTemp"..tostring(caster).."-"..tostring(target), target)
		local targetUnit = Survive.assets.entities[Entity_GetGameID(Survive_GetEntity(target))]
		local targetsgroup = SGroup_CreateIfNotFound("FindNewTargetTargetTemp"..tostring(caster).."-"..tostring(target))
		Team_GetAllSquadsNearMarker(targetUnit.team, targetsgroup, Util_GetPosition(sgroup), maxDistance)
		local randomPosition = Util_GetRandomPosition(sgroup, 8, 3)
		local numTarget = SGroup_CountSpawned(targetsgroup)
		
		if (numTarget > 0) and (SGroup_CountSpawned(sgroup) > 0) then
			local casterPosition = Util_GetPosition(sgroup)
			local squad = SGroup_GetRandomSpawnedSquad(targetsgroup)
			local distance = maxDistance+1
			for i=1, numTarget do
				local newSquad = SGroup_GetSpawnedSquadAt(targetsgroup, i)
				local squadDistance = World_DistancePointToPoint(casterPosition, Util_GetPosition(newSquad))
				if (squadDistance < distance) then
					squad = newSquad
					distance = squadDistance
				end
			end
			
			Cmd_Move(sgroup, randomPosition)
			Cmd_Attack(sgroup, squad, false)
			local unit = Survive.assets.entities[Entity_GetGameID(Squad_EntityAt(SGroup_GetRandomSpawnedSquad(sgroup), 0))]
			unit.enemyTeam = targetUnit.team
			Rule_AddOneShot(function() unit.enemyTeam = nil end, 10)
		else
			Cmd_StopSquads(sgroup)
			Cmd_Move(sgroup, randomPosition)
			local randomPosition = Util_GetRandomPosition(randomPosition, 20, 10)
			Cmd_Move(sgroup, randomPosition, true)
		end
		
		local casterID = Squad_GetGameID(Entity_GetSquad(Survive_GetEntity(caster)))
		local targetID = Squad_GetGameID(Entity_GetSquad(Survive_GetEntity(target)))
		
		
		if (casterID == targetID) then
			caster = Survive.assets.entities[Entity_GetGameID(Survive_GetEntity(caster))].confuseCaster
		end
		
		Survive_SetAttributeKills(caster, target, true)
		
		local antiFatalCasterEGroup = Util_CreateGroup("", caster)
		local antiFatalTargetEGroup = Util_CreateGroup("", target)
		Rule_AddOneShot(function()
			if (Util_CountGroup(antiFatalCasterEGroup) > 0) and (Util_CountGroup(antiFatalTargetEGroup) > 0) then
				Survive_SetAttributeKills(caster, target, false)
			end
		end, 10)
		
		Util_GroupDelete(targetsgroup)
		Util_GroupDelete(sgroup)
		return false
	else
		return false
	end
end

function Survive_MassConfusion(caster, target)
	local sgroup = Player_GetSquads(Survive.data.enemyNPC)
	local numSquads = SGroup_CountSpawned(sgroup)
	local squadTable = { }
	local nonConfusedSquadTable = { }
	local percentage = 0.3
	
	if (numSquads > 0) then
		if (numSquads > 1) then
			for i=1, numSquads do
				local squad = SGroup_GetSpawnedSquadAt(sgroup, i)
				table.insert(squadTable, squad)
			end
			for i=1, #squadTable do
				local rand = World_GetRand(1, #squadTable)
				squadTable[i], squadTable[rand] = squadTable[rand], squadTable[i]
			end
			while (#squadTable > math.ceil(numSquads*percentage)) do
				table.insert(nonConfusedSquadTable, squadTable[1])
				table.remove(squadTable, 1)
			end
		else
			table.insert(squadTable, SGroup_GetSpawnedSquadAt(sgroup, 1))
		end
	else
		return false
	end
	
	SGroup_Clear(sgroup)
	
	for k, v in pairs(squadTable) do
		SGroup_Add(sgroup, v)
		local entity = Survive_GetEntity(v)
		local unit = Survive.assets.entities[Entity_GetGameID(entity)]
		unit.confuseCaster = caster
	end
	
	Cmd_Ability(sgroup, Util_GetAbilityID("ability\\core\\race_eldar\\survive\\confuse_scar"))
	
	Util_GroupDelete(sgroup)
	return false
end

function Survive_ConfusePlayer(caster, target)
	Survive.data.confusedPlayers = Survive.data.confusedPlayers or { }
	if not (Squad_IsValid(target.id)) then return false end
	local player = Util_GetPlayerOwner(target)
	local playerID = Player_GetID(player)
	if (type(Survive.data.confusedPlayers[playerID]) == "table") then
		if (Survive.data.confusedPlayers[playerID].finish <= World_GetGameTime()) then
			Setup_SetPlayerTeam(player, Survive.data.confusedPlayers[playerID].originalTeam)
			Survive.data.confusedPlayers[playerID] = nil
			return false
		end
	else
		Survive.data.confusedPlayers[playerID] = { finish = World_GetGameTime() + 8, originalTeam = Player_GetTeam(player) }
		Setup_SetPlayerTeam(player, 10001)
	end
	return true
end

function Survive_RetreatBehindGate(caster, target)
	local targetscartype = scartype(target)
	if (targetscartype == ST_ENTITY) then
		target = Entity_GetSquad(target)
	end
	if (scartype(target) == ST_SQUAD) then
		local unit = Survive.assets.entities[Entity_GetGameID(Squad_EntityAt(target, 0))]
		local position = unit.data.spawnPosition or Util_GetRandomPosition(target, 60, 20)
		local sgroup = Util_CreateGroup("", target)
		if (unit.data.spawnGate) then
			local delay = math.floor((World_DistancePointToPoint(Util_GetPosition(sgroup), position) / 15.5))
			Rule_AddOneShot(function() unit.data.spawnGate:Open(10) end, delay)
			Cmd_RetreatToLocation(sgroup, position)
			return false
		else
			local wave = WaveManager.waves[WaveManager.currentWave]
			local entry = wave.entries[World_GetRand(1, #wave.entries)]
			local position = Util_GetPosition(entry.marker)
			local delay = math.floor((World_DistancePointToPoint(Util_GetPosition(sgroup), position) / 15.5))
			Rule_AddOneShot(function() entry.gate:Open(10) end, delay)
			
			Cmd_RetreatToLocation(sgroup, position)
			return false
		end
	else
		return false
	end
end

function Action_RandomTeleport(caster, target)
	local target = target or caster
	local position = Util_GetRandomPosition(target, 20, 10)
	local sgroup = Util_CreateGroup("RandomTeleportTemp"..tostring(target)..tostring(World_GetRand(1, 10000)), target)
	local raceNameTable = { [RACE_ELDAR] = "Eldar", [RACE_SPACEMARINE] = "Space_Marine", [RACE_ORK] = "Ork", [RACE_TYRANID] = "Tyranid", [RACE_TAU] = "Tau", [RACE_NECRON] = "Necron" }
	local racename = raceNameTable[Player_GetRaceString(Util_GetPlayerOwner(target))] or "Space_Marine"
	
	local teleportArrive = "Abilities\\"..racename.."\\teleport_arrive"
	local teleportLeave = "Abilities\\"..racename.."\\teleport_leave"
	
	Util_SetAnimatorAction(sgroup, teleportLeave)
	Cmd_SquadAbilityPos(sgroup, Util_GetAbilityID("ability\\core\\race_ork\\survive\\scar_teleport"), position, true)
	Rule_AddOneShot(function() Util_SetAnimatorAction(sgroup, teleportArrive) end, 0.3)
	Rule_AddOneShot(function() Util_GroupDelete(sgroup) end, 0.4)
	
	return false
end

function Action_LeakyArmor(caster, target)
	local target = Entity_GetSquad(caster)
	local position = Util_GetRandomPosition(target, 10, 5)
	local sgroup = Util_CreateGroup(tostring(target), target)
	
	local ability = Util_GetAbilityID("ability\\core\\race_ork\\survive\\leaky_mine")
	
	
	
	Cmd_SquadAbilityPos(sgroup, ability, position, true)
	
	return false
end

function Action_RandomOrkTeleport(caster, target)
	local target = target or caster
	local position = Util_GetRandomPosition(target, 20, 10)
	local sgroup = Util_CreateGroup("RandomTeleportTemp"..tostring(target)..tostring(World_GetRand(1, 10000)), target)
	local position = Util_GetRandomPosition(target, 20, 10)
	
	local teleportArrive = "Abilities\\Ork\\teleport_arrive"
	local teleportLeave = "Abilities\\Ork\\teleport_leave"
	
	Util_SetAnimatorAction(sgroup, teleportLeave)
	Cmd_SquadAbilityPos(sgroup, Util_GetAbilityID("ability\\core\\race_ork\\survive\\scar_teleport"), position, true)
	Rule_AddOneShot(function() Util_SetAnimatorAction(sgroup, teleportArrive) end, 0.3)
	Rule_AddOneShot(function() Util_GroupDelete(sgroup) end, 0.4)
	
	return false
end

function Action_SpawnDreadnoughtProtector(caster, target)
	-- This caster could be nil if the player got disconnected.
	if( caster == nil ) then
		return false
	end

	local player = Util_GetPlayerOwner(caster)
	local targetPlayer = Survive.data.playerRelationshipTable[Player_GetID(player)]
	
	Action_SpawnDreadnoughtForPlayer(caster, target, targetPlayer)
	return false
end


function Action_SpawnDreadnoughtForPlayer(caster, target, player)
	local unit = Survive.Unit:GetFromName(player, "Dreadnought Protector")
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	local casterSGroup = Util_CreateGroup("", caster)
	
	if (Player_GetID(casterUnit.player) ~= Player_GetID(unit.player)) 
	and (Player_GetID(unit.player) ~= Player_GetID(Survive.data.jerkNPC)) then
		local casterColour = Player_GetTeamColourName(casterUnit.player)
		unit:SetTeamColour(casterColour)
	end
	
	local position = Util_GetPosition(target)
	casterUnit:IncrementSimVariable(familyManager.sim_variable.dreadnought_alive, 1)
	Rule_AddOneShot(function()
		if (SGroup_CountSpawned(casterSGroup) > 0) then
			
			casterUnit:RegisterMinion(unit)
			unit:Spawn(position)
			
			Survive_SetAttributeKills(caster, unit.sgroup, true)
			
			Survive.Behavior.AddBehavior(unit, {name="Protector", friend=casterSGroup, distance=35})
			
			local dreadnought = Squad_EntityAt(SGroup_GetRandomSpawnedSquad(unit.sgroup), 0)
			Survive.EventHandler:AddEntityKilledListener(
				function() 
					if (SGroup_CountSpawned(casterSGroup) > 0) then
						casterUnit:IncrementSimVariable(familyManager.sim_variable.dreadnought_alive, -1)
					end
				end, 
				{ entity=dreadnought }
			)
			if (Player_GetID(player) == Player_GetID(Survive.data.enemyNPC)) then
				WaveManager:RegisterUnit(unit)
			end
		end
	end, 8)
	return false
end

function Action_SpawnShieldDrone(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Shield Drone",
		familyManager.sim_variable.shield_drone_alive,
		0,
		35
	)
	return false
end

function Action_SpawnMarkerDrone(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Marker Drone",
		familyManager.sim_variable.marker_drone_alive,
		0,
		35
	)
	return false
end

function Action_SpawnGunDrone(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Heavy Gun Drone",
		familyManager.sim_variable.gun_drone_alive,
		0,
		35
	)
	return false
end

function Action_SpawnTermagauntProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Termagaunt Protector", 
		familyManager.sim_variable.termagaunt_alive,
		0,
		20
	)
	return false
end

function Action_SpawnHormagauntProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Hormagaunt Protector",
		familyManager.sim_variable.hormagaunt_alive,
		0,
		35
	)
	return false
end

function Action_SpawnTyrantGuardProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Tyrant Guard Protector",
		familyManager.sim_variable.tyrant_guard_alive,
		0,
		35
	)
	return false
end

function Action_SpawnWarriorProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Warrior Protector",
		familyManager.sim_variable.warrior_alive,
		0,
		35
	)
	return false
end

function Action_SpawnZoanthropeProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Zoanthrope Protector",
		familyManager.sim_variable.zoanthrope_alive,
		0,
		20
	)
	return false
end

function Action_SpawnRavenerProtector(caster, target)	
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Ravener Protector",
		familyManager.sim_variable.ravener_alive,
		0,
		25
	)
	return false
end

function Action_SpawnGenestealerProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Genestealer Protector",
		familyManager.sim_variable.genestealer_alive,
		0,
		35
	)
	return false
end

function Action_SpawnCatachanProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Catachan Protector",
		familyManager.sim_variable.catachan_alive,
		0,
		25
	)
	return false
end

function Action_SpawnCommissarProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Commissar Protector",
		familyManager.sim_variable.commissar_alive,
		0,
		35
	)
	return false
end

function Action_SpawnGuardsmenProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Guardsmen Protector",
		familyManager.sim_variable.guardsmen_alive,
		0,
		25
	)
	return false
end

function Action_SpawnOgrynProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Ogryn Protector",
		familyManager.sim_variable.ogryn_alive,
		0,
		80
	)
	return false
end

function Action_SpawnSergeantProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Sergeant Protector",
		familyManager.sim_variable.sergeant_alive,
		0,
		35
	)
	return false
end

function Action_SpawnStormtrooperProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Stormtrooper Protector",
		familyManager.sim_variable.stormtrooper_alive,
		0,
		25
	)
	return false
end

function Action_SpawnVoxProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Vox Protector",
		familyManager.sim_variable.vox_alive,
		0,
		25
	)
	return false
end

function Action_SpawnMixedSquadProtector(caster, target)
	Action_SpawnProtectorUnitForPlayer(
		caster, 
		target, 
		"Mixed Squad Protector",
		familyManager.sim_variable.mixed_squad_alive,
		0,
		25
	)
	return false
end


function Action_SpawnProtectorUnitForPlayer(caster, target, unitName, simVariable, delay, leash)	
	-- This caster could be nil if the player got disconnected.
	if( caster == nil ) then
		return false
	end
	
	local player = Util_GetPlayerOwner(caster)
	local targetPlayer = Survive.data.playerRelationshipTable[Player_GetID(player)]
	local unit = Survive.Unit:GetFromName(targetPlayer, unitName)

	local delay = delay or 0
	local leash = leash or 35
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	local casterSGroup = Util_CreateGroup("", caster)
	
	if (Player_GetID(casterUnit.player) ~= Player_GetID(unit.player)) 
	and (Player_GetID(unit.player) ~= Player_GetID(Survive.data.jerkNPC)) then
		local casterColour = Player_GetTeamColourName(casterUnit.player)
		unit:SetTeamColour(casterColour)
	end
	
	local position = Util_GetPosition(target)
	casterUnit:IncrementSimVariable(simVariable, 1)
	Rule_AddOneShot(function()
		if (SGroup_CountSpawned(casterSGroup) > 0) then
			casterUnit:RegisterMinion(unit)
			unit:Spawn(position, {{name="Protector", friend=casterSGroup, distance=leash}})
			unit:TeleportInAnimation()
			Survive_SetAttributeKills(caster, unit.sgroup, true)
			unit:EquipWargear({"wargear\\wargear\\core\\race_tyranid\\accessories\\survive\\special\\minion_nimbus"})
			
			Survive_RegisterMinionDeathEvent(casterUnit.sgroup, casterUnit, unit.sgroup, unit, simVariable)
			
			if (Player_GetID(player) == Player_GetID(Survive.data.enemyNPC)) then
				WaveManager:RegisterUnit(unit)
			end
		end
	end, delay)
	return false
end

function Action_ConvertToAllyNPC(caster, target)
	local target = target or caster
	Util_SetPlayerOwner(target, Survive.data.allyNPC)
	return false
end

function Survive_SummonDoppelgangerEnhanced(caster, target)
	local enhancedAttributes = {
		{
			type = LEVELING_ATTRIB_POINTS_Health,
			level = 2,
		},
		{
			type = LEVELING_ATTRIB_POINTS_Energy,
			level = 2,
		},
		{
			type = LEVELING_ATTRIB_POINTS_Melee,
			level = 2,
		},
		{
			type = LEVELING_ATTRIB_POINTS_Ranged,
			level = 2,
		},
	}
	
	
	Survive_SummonDoppelganger(caster, target, enhancedAttributes)
	return false
end

function Survive_SummonDoppelganger(caster, target, enhancedAttributes)
	local target = target or caster
	
	if (scartype(target) == ST_SQUAD) then
		target = Squad_EntityAt(target, 0)
	end
	if (scartype(caster) == ST_SQUAD) then
		caster = Squad_EntityAt(caster, 0)
	end
	local position = Util_GetRandomPosition(caster, 4, 2)
	local targetUnit = Survive.assets.entities[Entity_GetGameID(target)]
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	local player = Survive.data.playerRelationshipTable[Player_GetID(Util_GetPlayerOwner(caster))]
	if not (targetUnit) then fatal("tried to Summon a Doppleganger for an un-registered entity") end
	local unit = Survive.Unit:GetPlayerUnit(player, targetUnit.data)
	
	unit.data.locName = Loc_FormatText(9120364, unit.data.locName, 9120361)
	unit.data.name = (unit.data.name.." Doppelganger")
	unit.data.minionID = "Doppelganger"
	unit.data.Doppleganger_NoBadge = 1 -- added so that we can check that this was assigned by a doppleganger
	
	if (Player_GetID(casterUnit.player) ~= Player_GetID(unit.player)) 
	and (Player_GetID(unit.player) ~= Player_GetID(Survive.data.jerkNPC)) then
		local casterColour = Player_GetTeamColourName(casterUnit.player)
		unit:SetTeamColour(casterColour)
	end
	
	unit.data.behaviorList = unit.data.behaviorList or { }
	
	unit.data.points = -1
	local behaviors = {
		{name="Protector", friend=casterUnit.sgroup, distance=35, friendName=casterUnit.data.name},
		{name="NonCombatAbilities", abilityBehavior="nonCombat"},
		{name="CombatAbilities"},
	}
	
	casterUnit:RegisterMinion(unit)
	unit.summonedDoppelganger = true
	
	if (type(unit.data.sbp) == "string") then
		unit.data.blueprintString = unit.data.sbp
		unit.data.sbp = Util_GetSquadBlueprintID(unit.data.blueprintString)
	end
	
	unit:Spawn(position, behaviors)
	Util_SetAnimatorAction(unit.sgroup, "abilities\\Chaos\\warp_rift")
	unit:SetUnconscious(false)
	Survive_SetAttributeKills(caster, unit.sgroup, true)
	
	if (enhancedAttributes) then 
		if not (targetUnit.doppelganger) then unit:ApplyAttributes(enhancedAttributes) end
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\nimbus"})
	else
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\nimbus_minor"})
	end
	casterUnit:IncrementSimVariable(familyManager.sim_variable.doppelganger_alive, 1)
	Survive_RegisterMinionDeathEvent(casterUnit.sgroup, casterUnit, unit.sgroup, unit, familyManager.sim_variable.doppelganger_alive)
	if (Player_GetID(player) == Player_GetID(Survive.data.enemyNPC)) then
		WaveManager:RegisterUnit(unit)
	end
	
	print(unit.data.name) -- Checks the unit name and then changes their decorator to a non-hero version so it doesn't overlap with the portrait.  Silly, I know.
	if unit.data.name == "apothecary Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_ranged"})
	elseif unit.data.name == "force commander Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_melee"})
	elseif unit.data.name == "zoanthrope Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_ranged_2"})
	elseif unit.data.name == "wraithlord Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_melee"})
	elseif unit.data.name == "Lictor Hero Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_melee"})
	elseif unit.data.name == "Warboss Hero Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_melee"})
	elseif unit.data.name == "Terminator Hero Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_infantry_ranged_2"})
	elseif unit.data.name == "Chaos Lord Doppelganger" then
		unit:EquipWargear({"wargear\\wargear\\core\\race_chaos\\accessories\\decorator_anti_everything_melee"})
	end
	
	return false
end

function Survive_RegisterMinionDeathEvent(casterSGroup, casterUnit, minionSGroup, minionUnit, simVariable)
	for i=0, (Squad_Count(SGroup_GetSpawnedSquadAt(minionSGroup, 1))) - 1 do
		local localEntity = Squad_EntityAt(SGroup_GetRandomSpawnedSquad(minionSGroup), i)
		Survive.EventHandler:AddEntityKilledListener(
			function() 
				local squad = SGroup_GetSpawnedSquadAt(minionSGroup, 1)
				if (SGroup_CountSpawned(casterSGroup) > 0) and (Squad_Count(squad) == 1) then
					casterUnit:IncrementSimVariable(simVariable, -1)
				end
			end, 
			{ entity=localEntity }
		)
	end
end

function Survive_UnconsciousEvent(caster, target)
	local unit = Survive.assets.entities[Entity_GetGameID(caster)]
	if (unit) then
		if not (unit.hasBeenUnconscious) then
			unit.hasBeenUnconscious = true
			unit:AwardPoints()
		end
	else
		print("SCAR WARNING: an entity just became Unconscious that wasn't registered as a Unit")
		print("It was: "..Entity_GetBlueprintName(caster))
	end
	return false
end

function Survive_SetAttributeKills(owner, minion, enable)
	local owner = Survive_GetEntity(owner)
	local minion = Survive_GetEntities(minion)
	
	if (scartype(minion) == ST_ENTITY) then
		Entity_SetAttributee(minion, owner)
		Entity_SetAttributeKills(minion, enable)
	elseif (minion ~= nil) then
		for k, v in pairs(minion) do
			Entity_SetAttributee(v, owner)
			Entity_SetAttributeKills(v, enable)
		end
	end
end

function Survive_GetEntity(object)
	local utilTable = {
		[ST_ENTITY] = {
			funct = function() 
				return object 
			end
		},
		[ST_SQUAD] = {
			funct = function()
				return Squad_EntityAt(object, 0)
			end
		},
		[ST_EGROUP] = {
			funct = function()
				if (EGroup_CountSpawned(object) > 0) then
					return EGroup_GetSpawnedEntityAt(object, 1)
				else
					return nil
				end
			end
		},
		[ST_SGROUP] = {
			funct = function()
				if (SGroup_CountSpawned(object) > 0) then
					return Survive_GetEntity(SGroup_GetSpawnedSquadAt(object, 1))
				else
					return nil
				end
			end
		},
	}
	
	local objectType = scartype(object)
	
	if (type(utilTable[objectType].funct) == "function") then
		return utilTable[objectType].funct()
	else
		fatal("Survive_GetEntity got something that was invalid, what it got was "..type(object))
	end
end

function Survive_GetEntities(object)
	
	local utilTable = {
		[ST_ENTITY] = {
			funct = function() 
				return object 
			end
		},
		[ST_SQUAD] = {
			funct = function()
				local entityTable = { }
				for i=0, Squad_Count(object)-1 do
					table.insert(entityTable, Squad_EntityAt(object, i))
				end
				return entityTable
			end
		},
		[ST_EGROUP] = {
			funct = function()
				if (EGroup_CountSpawned(object) > 0) then
					return EGroup_GetSpawnedEntityAt(object, 1)
				else
					return nil
				end
			end
		},
		[ST_SGROUP] = {
			funct = function()
				if (SGroup_CountSpawned(object) > 0) then
					return Survive_GetEntities(SGroup_GetSpawnedSquadAt(object, 1))
				else
					return nil
				end
			end
		},
	}
	
	local objectType = scartype(object)
	
	if (type(utilTable[objectType].funct) == "function") then
		return utilTable[objectType].funct()
	else
		fatal("Survive_GetEntities got something that was invalid, what it got was "..type(object))
	end
end

function Survive_TalonsOfLife(caster, target)
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	local ownerUnit = casterUnit.owner
	
	if (SGroup_CountSpawned(ownerUnit.sgroup) > 0) and (not ownerUnit:IsKO()) then
		Cmd_Ability(casterUnit.sgroup, Util_GetAbilityID("ability\\core\\race_tyranid\\survive\\heal_talons_of_life"), ownerUnit.sgroup)
	end
	
	return false
end

function Survive_ReinforceMinions(caster, target)
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	casterUnit:ReinforceMinions()
	
	return false
end

function Survive_HealMinions(caster, target)
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	casterUnit:HealMinions(0.05)
	
	return false
end

function Survive_BounceFireball(caster, target)
	local sgroup = SGroup_Create("")
	
	Util_CreateSquadsAtMarker(
		World_GetPlayerAt(1), 
		sgroup, 
		"sbps\\core\\race_chaos\\survive\\invisible_fireball", 
		Util_GetPosition(target),
		1, 
		1
	)
	local position = Util_GetRandomPosition(sgroup, 12, 3)
	Cmd_Ability(sgroup, Util_GetAbilityID("ability\\core\\race_chaos\\survive\\fireball_bounce"), position)
	print("Tried to bounce a fireball")
	Rule_AddOneShot(function()
		SGroup_DestroyAllSquads(sgroup)
		print("Destroyed magical bouncing fireball")
	end, 2)
	return false
end

function Survive_ChaosFissures(caster, target)
	if (scartype(caster) == ST_SQUAD) then
		caster = Squad_EntityAt(target, 0)
	end
	
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	
	if (casterUnit) and (SGroup_CountSpawned(casterUnit.sgroup) > 0) then
		local randomTime = World_GetRand(6, 14)
		casterUnit.chaosFissureTime = casterUnit.chaosFissureTime or World_GetGameTime() + randomTime
		
		if (World_GetGameTime() > casterUnit.chaosFissureTime) and (SGroup_CountSpawned(casterUnit.sgroup) > 0) then
			if not (casterUnit:IsKO()) then
				local position = Util_GetRandomPosition(caster, 25, 6)
				Util_SetAnimatorAction(caster, "abilities\\chaos\\warp_rift")
				Cmd_PlayerAbilityPos(casterUnit.player, Util_GetAbilityID("ability\\core\\race_chaos\\survive\\chaos_fissures_scar"), position)
			end
			casterUnit.chaosFissureTime = nil
		end
	else
		print("SCAR WARNING: Attempted to Chaos Fissure something that didn't have a unit, Entity ID was: "..
			Entity_GetGameID(caster).. " ebp was: "..Entity_GetBlueprintName(caster)
		)
	end
	return true
end

function Survive_ConsumeMinions(caster, target)
	if (scartype(caster) == ST_SQUAD) then
		caster = Squad_EntityAt(target, 0)
	end
	local casterUnit = Survive.assets.entities[Entity_GetGameID(caster)]
	for k, v in pairs(casterUnit.minionList) do
		Util_SetAnimatorAction(v.sgroup, "abilities\\chaos\\sorceror_consume_devoured")
		v:Kill()
	end
	return false
end

function Survive_Reinforce(caster, target)
	if (scartype(target) == ST_SQUAD) then
		target = Squad_EntityAt(target, 0)
	end
	local targetUnit = Survive.assets.entities[Entity_GetGameID(target)]
	
	if (targetUnit) then
		targetUnit:Reinforce()
	else
		print("SCAR WARNING: Attempted to Reinforce something that didn't have a unit, Entity ID was: "..
			Entity_GetGameID(target).. " ebp was: "..Entity_GetBlueprintName(target)
		)
	end
	
	return false
end

function Survive_AESetAttributeKillsPermanent(caster, target)
	Survive_SetAttributeKills(caster, target, true)
	return false
end

function Survive_AEDebug(caster, target)
	print("Survive AE Debug")
	if (caster) then print("caster = "..tostring(scartype_constant_tostring(scartype(caster)))) else print("no caster") end
	if (target) then print("target = "..tostring(scartype_constant_tostring(scartype(target)))) else print("no target") end
	
	if (scartype(caster) == ST_SCARPOS) then
		print("caster position...")
		for k, v in pairs(caster) do
			print(v)
		end
	end
	if (scartype(target) == ST_SCARPOS) then
		print("target position...")
		for k, v in pairs(target) do
			print(v)
		end
	end
	return false
end

function Action_AssignPlayerUpgrade(caster, target)
		
		local sgroup = Util_CreateGroup("FindNewTargetTemp"..tostring(caster).."-"..tostring(caster), caster)
		
		--  This section should be able to pass in an upgrade to give to the minion squad that designates which player spawned them
		-- This way I can give out wargear/bonuses ONLY to the commander who spawned them
		if Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(1)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_1"))
			print("you are player 1")
		elseif Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(2)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_2"))
			print("you are player 2")
		elseif Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(3)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_3"))
			print("you are player 3")
		elseif Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(4)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_1"))
			print("you are player 1s son")
		elseif Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(7)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_2"))
			print("you are player 2s son")
		elseif Player_GetID(Util_GetPlayerOwner(caster)) == Player_GetID(World_GetPlayerAt(8)) then
			Cmd_SquadUpgrade(sgroup, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_3"))
			print("you are player 3s son")
		end
		
		Util_GroupDelete(sgroup)
		
		return false

end

function Action_RetreatToPosition(caster, target)
	CommanderRetreat = {}
	
	local caster = caster
	local sgroupid =  SGroup_CreateIfNotFound( "ig_retreatsquad" )
	SGroup_Add(sgroupid, caster) 
	
	if Squad_HasUpgrade(caster, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_1")) then
		CommanderRetreat.position_player_1 = target
	elseif Squad_HasUpgrade(caster, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_2")) then
		CommanderRetreat.position_player_2 = target
	elseif Squad_HasUpgrade(caster, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_3")) then
		CommanderRetreat.position_player_3 = target
	end

	Cmd_RetreatToLocation(sgroupid, target)
	SGroup_Remove(sgroupid, caster)
	
	return false
	
end

function Action_RetreatStormtroopersToPosition(caster, target)
	local target = target

	local sgroupid =  SGroup_CreateIfNotFound( "ig_retreatsquad" )
	SGroup_Add(sgroupid, target) 
	
	if Squad_HasUpgrade(target, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_1")) then
		Cmd_RetreatToLocation(sgroupid, CommanderRetreat.position_player_1)
	elseif Squad_HasUpgrade(target, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_2")) then
		Cmd_RetreatToLocation(sgroupid, CommanderRetreat.position_player_2)
	elseif Squad_HasUpgrade(target, Util_GetUpgradeID("upgrade\\core\\race_imperial_guard\\survive\\commander_is_player_3")) then
		Cmd_RetreatToLocation(sgroupid, CommanderRetreat.position_player_3)
	end
	
	SGroup_Remove(sgroupid, target)
	
	return false
	
end


--~ function Action_TurretSetToAlly(caster, target)

--~ 	TurretPlayerOwnerVariable = Player_GetID(Util_GetPlayerOwner(caster))
--~ 	
--~ 	print(TurretPlayerOwnerVariable)
--~ 	print(Player_GetID(World_GetPlayerAt(1)))
--~ 	
--~ 	if TurretPlayerOwnerVariable == Player_GetID(World_GetPlayerAt(1)) then
--~ 		Entity_SetPlayerOwner(caster, Survive.data.allyNPC)
--~ 	end
--~ 	
--~ 	if TurretPlayerOwnerVariable == Player_GetID(World_GetPlayerAt(2)) then
--~ 		Entity_SetPlayerOwner(caster, Survive.data.secondAllyNPC)
--~ 	end
--~ 	
--~ 	if TurretPlayerOwnerVariable == Player_GetID(World_GetPlayerAt(3)) then
--~ 		Entity_SetPlayerOwner(caster, Survive.data.thirdAllyNPC)
--~ 	end
--~ 	return false
--~ end

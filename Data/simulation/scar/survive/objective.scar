-- Change this to load different data sets
import("Survive//Data//Objectives.scar")

local state = {
    INACTIVE = 1,
    ACTIVE = 2,
    COMPLETE = 3,
}

Survive.Objective = Survive.Event:New()
Survive.Objective.TextID = 0

function Survive.Objective:New(data, primary)
    local new = Clone(self)
    new.primary = primary
    return new
end

function Survive.Objective:Complete()
    Objective_Complete( self.objective )
end

function Survive.Objective:GetTextID()
    Survive.Objective.TextID = Survive.Objective.TextID + 1
    return Survive.Objective.TextID    
end

function Survive.Objective:Go(objTable)
    self.objId = self:RegisterObjective(objTable)
    self:StartObjective(objTable, true)
end

function Survive.Objective.GetHeight(instance)
    Survive.Objective.heightInstances = Survive.Objective.heightInstances or {}
    
    if(Survive.Objective.heightInstances[instance])then
        return Survive.Objective.heightInstances[instance]
    end
    
    Survive.Objective.height = Survive.Objective.height or 12
    Survive.Objective.height = Survive.Objective.height + 1
    Survive.Objective.heightInstances[instance] = Survive.Objective.height / 25
    return Survive.Objective.heightInstances[instance]
end

function Survive.Objective:PrintOnScreen(text, instance, duration, pos, color)
    text = text or 0
    duration = duration or 0
	instance = instance or tostring(self)
    
    pos = pos or {}
    pos.x = pos.x or 0.05
    pos.y = pos.y or Survive.Objective.GetHeight(instance)
    
    color = color or {}
    color.r = color.r or 213
    color.g = color.g or 213
    color.b = color.b or 213
    
	dr_clear(instance)
	
	dr_setautoclear(instance, duration)
	dr_text2d(instance, pos.x, pos.y, text, color.r, color.g, color.b) 
end

function Survive.Objective:PrintObjective(text)
    self.text = text or self.text
    if(not self.updateText and self.primary)then
        local f = function()
            if(self.complete)then
                Rule_RemoveMe()
                return
            end
            self:PrintObjective(self.text)
        end
        Rule_AddInterval(f, 1)
        self.updateText = true
    end
    self.txtID = self.txtID or self:GetTextID()
    
    local txt = self.text
    local color = {r=255, g=255, b=0}
    if (self.primary)then
        if(self.objectivePosition)then
            local pos = self.objectivePosition
            if(type(self.objectivePosition) == "table" and type(self.objectivePosition.GetPosition) == "function")then
                pos = self.objectivePosition:GetPosition()
            end
            
            local direction = trig.GetDirectionString(Survive.Player.GetLocal():GetPosition(), pos) or ""
            txt = "* " .. txt .. " * (" .. direction .. ")"
        else
            txt = "* " .. txt .. " *"        
        end
        color = {r=255, g=0, b=0}
    end
    
    self:PrintOnScreen(txt, self.txtID, 0, nil, color )
end

function Survive.Objective:ClearAllText()
    for i=1, 100 do
        self:PrintOnScreen("", i)
    end
end
--Pre-Clear everything
Survive.Objective:ClearAllText()


function Survive.Objective:CompleteObjective(text)
    text = text or self.text
    text = text .. " (Complete)"
    self:PrintOnScreen(text, self.txtID, 0, nil, {r=0, g=255, b=0} )
end

function Survive.Objective:Complete()
    Survive.EventHandler:SendEvent("ObjectiveComplete", self)
    self:CompleteObjective()
    self.complete = true
    if(self.data and self.data.SubObjectives)then
        print("Starting sub objectives")
        for k,v in pairs(self.data.SubObjectives) do 
            self:StartObjective(v, self.primary)
        end
    end
    if(self.primary)then
        self:CompletePrimaryObjective()
    end
end


function Survive.Objective:CompletePrimaryObjective()
    local index
    for k,v in pairs(Survive.primaryObjectives) do
        if(v == self) then
            index = k
        end
    end
    
    if(index)then
        table.remove(Survive.primaryObjectives, index)
        if(#Survive.primaryObjectives == 0)then
            print("its over")
            self:EndMission()
        end
    end
end

function Survive.Objective:EndMission()
    print("Ending Mission")
    local id = self:GetTextID()
    for i = 1, 10 do 
        local f = function()
            local text = "Extracting in " .. (10 - i) .. "..."
            self:PrintOnScreen(text, id, 0, {x=0.4, y= 0.45}, {r=255, g=255, b=255})
            print(text)
            if(i==10)then
                self:ClearAllText()
                Game_EndSP(true)
            end
        end
        
        Rule_AddOneShot(f, i)
    end
end


-- Static Functions
function Survive.Objective.GetRandom()
    local obj = Survive.Objective.GetObjectives()
    

    
    if(#obj <= 0)then
        return nil
    end
    
    local index = World_GetRand(1, #obj)
    local item = Survive.Objective.GetObjectiveFromIndex(index)
    
    
    local numRooms = #Survive.Room:FilterList(item.room)
    if(numRooms == 0)then
        return nil
    end
    
    return item
end

function Survive.Objective.GetPrimary()
    local t = {}
    for k,v in pairs(Survive.Objective.GetObjectives())do 
        local numRooms = #Survive.Room:FilterList(v.room)
        if(v.validate.primary and numRooms > 0)then
            local weight = v.weight or 1
            for i = 1, weight do 
                table.insert(t, k)
            end
        end
    end
    
    local index = Table_GetRandomItem(t)
    local item = Survive.Objective.GetObjectiveFromIndex(index)
    return item
end

function Survive.Objective.GetObjectives()
    Survive.Objective.objectives = Survive.Objective.objectives or Clone(Survive.data.objectives)
    return Survive.Objective.objectives
end

function Survive.Objective.GetObjectiveFromIndex(i)
    local item = Survive.Objective.GetObjectives()[i]
    
    if(not item.validate.limit or item.validate.limit == 1)then
        table.remove(Survive.Objective.GetObjectives(), i)
    else
        item.validate.limit = item.validate.limit - 1
    end
    
    return Clone(item)
end

function Survive.Objective.GetOppertunityObjective()
end

function Survive.Objective:StartObjective(data, primary)
    local obj = Survive.objectives[data.objective]:New(data, primary)
    if(primary)then
        table.insert(Survive.primaryObjectives, obj)
    end
    
    Survive.AddEvent(obj)
    obj.parent = self
    obj:Initialize()
    obj:Start()
end
